#!/usr/bin/perl
use strict;
use warnings FATAL => 'all';

use Getopt::Long;

# shell function:
# mplayer_redir () {
#   /usr/bin/mplayer -quiet -msglevel all=0 -identify \
#     -include $XDG_CONFIG_HOME/mplayer/config -profile $HOST \
#     $(absname "$@") > $XDG_CONFIG_HOME/mplayer/log.txt
#   rm -v $XDG_CONFIG_HOME/mplayer/log.txt
# }

# input.conf:
# DEL run 'mplayer_delete_current_file -rm'


my $opt = {
  log => "$ENV{XDG_CONFIG_HOME}/mplayer/log.txt",
  rm  => 0,
};

GetOptions(
  'log:s'     => \$opt->{log},
  'rm|delete' => sub { rm( get_np_file() ); exit },
  'np'        => sub { printf("%s\n", get_np_file()); exit },
);

sub rm {
  my $file = shift;

  if(-t STDOUT) {
    printf("rm(): unlink %s ? [Y/n] ", $file);
    chomp(my $choice = <>);

    if(lc($choice) ne 'y') {
      return;
    }
  }
  if(unlink($file)) {
    printf("\n Â» \e[38;5;196;1mremoved '%s'\e[m\n\n", $file);
    system('ratpoison', '-c', "echo $file deleted.");
  }
  else {
    warn "Could not unlink $file: $!\n";
  }
}

sub get_np_file {
  open(my $fh, '<', $opt->{log}) or die "mplayer not running?\n";
  my $meta = { };

  my @rev_log = map { chomp; $_ } reverse( <$fh> );

  for my $line(@rev_log) {
    if($line =~ m/ID_FILENAME=(.+)$/) {
      return $1;
    }
  }
}
